// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SophiSDK
import Foundation
import SnowplowTracker
@_exported import SophiSDK
import Swift
import UIKit
import WebKit
import os
public typealias ContextData = [Swift.String : Swift.AnyObject]
public typealias UnstructuredEventData = [Swift.String : Any]
public protocol EventTrackable : Swift.Decodable, Swift.Encodable {
}
@objc @_inheritsConvenienceInitializers public class SophiTracker : ObjectiveC.NSObject {
  public enum Constants {
    public enum EventDataKeys {
      public static let type: Swift.String
      case pageData
      case contentData
      case accountData
      case visitorData
      case linkData
      case wallData
      case subscriptionData
      case mediaData
      case adData
      case pingData
      public static func == (a: SophiSDK.SophiTracker.Constants.EventDataKeys, b: SophiSDK.SophiTracker.Constants.EventDataKeys) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum EventTypes : Swift.String {
      case pageView
      case accountInteraction
      case linkImpresion
      case mediaEvent
      case adEvent
      case subscription
      case wallHit
      case linkClick
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Config {
      public enum Keys {
        public static let client: Swift.String
        public static let deviceType: Swift.String
        public static let environment: Swift.String
        public static let appVersion: Swift.String
        public static let userID: Swift.String
      }
      public enum Values {
        public enum Environment : Swift.String {
          case prod
          case staging
          case dev
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
        public enum DeviceType : Swift.String {
          case tablet
          case mobile
          case tv
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
      }
    }
    public enum AccountData {
      public enum Keys {
        public static let type: Swift.String
        public static let action: Swift.String
      }
      public enum Values {
        public enum AccountType : Swift.String, Swift.Codable {
          case login
          case registration
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
        public enum Action : Swift.String, Swift.Codable {
          case signOut
          case signIn
          case completed
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
      }
    }
    public enum VisitorData {
      public enum Keys {
        public static let visitorType: Swift.String
        public static let visitorUserID: Swift.String
        public static let uid: Swift.String
        public static let isLoggedIn: Swift.String
      }
      public enum Values : Swift.String, Swift.Codable {
        case registered
        case subscribed
        case anonymous
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
    }
    public enum LinkImpression {
      public enum Keys {
        public static let uri: Swift.String
        public static let contentID: Swift.String
        public static let label: Swift.String
        public static let feature: Swift.String
        public static let position: Swift.String
        public static let total: Swift.String
      }
    }
    public enum LinkData {
      public enum Keys {
        public static let feature: Swift.String
        public static let type: Swift.String
        public static let linkText: Swift.String
        public static let contentID: Swift.String
        public static let position: Swift.String
        public static let total: Swift.String
        public static let targetURL: Swift.String
      }
    }
    public enum SubscriptionData {
      public enum Keys {
        public static let transactionId: Swift.String
        public static let name: Swift.String
        public static let subscriptionType: Swift.String
      }
      public enum SubscriptionTypeValues : Swift.String, Swift.Codable {
        case digital
        case print
        case other
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
    }
    public enum WallData {
      public enum Keys {
        public static let type: Swift.String
        public static let name: Swift.String
        public static let isDynamic: Swift.String
        public static let wallReason: Swift.String
        public static let meterCount: Swift.String
        public static let meterLimit: Swift.String
        public static let adsVisible: Swift.String
        public static let countVisibleParagraphs: Swift.String
      }
      public enum WallTypeValues : Swift.String, Swift.Codable {
        case paywallHard
        case paywallMetered
        case regwallHard
        case regwallMetered
        case regwallSoft
        case growl
        case scroll
        case adwall
        case ageWall
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
    }
    public enum PageData {
      public enum Keys {
        public static let pageType: Swift.String
        public static let breadcrumb: Swift.String
        public static let sectionName: Swift.String
        public static let keywords: Swift.String
        public static let datePublished: Swift.String
        public static let url: Swift.String
        public static let title: Swift.String
      }
      public enum PageTypes : Swift.String, Swift.Codable {
        case article
        case section
        case account
        case subscription
        case game
        case tool
        case stock
        case gallery
        case slideshow
        case video
        case error
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public enum ContentKeys {
        public static let contentType: Swift.String
        public static let contentId: Swift.String
        public static let accessCategory: Swift.String
        public static let contentSize: Swift.String
        public static let accessName: Swift.String
        public static let ownership: Swift.String
        public static let creditLine: Swift.String
        public static let byline: Swift.String
      }
      public enum ContentTypeValues : Swift.String, Swift.Codable {
        case article
        case video
        case audio
        case image
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
    }
    public enum PingData {
      public enum Keys {
        public static let view: Swift.String
        public static let maxY: Swift.String
        public static let length: Swift.String
      }
    }
    public enum MediaData {
      public enum Keys {
        public static let type: Swift.String
        public static let action: Swift.String
        public static let id: Swift.String
        public static let isAutoPlay: Swift.String
        public static let duration: Swift.String
        public static let timeElapsed: Swift.String
        public static let playbackRate: Swift.String
        public static let previousPosition: Swift.String
        public static let featureType: Swift.String
        public static let feature: Swift.String
        public static let isFullScreen: Swift.String
        public static let isInView: Swift.String
        public static let isMute: Swift.String
        public static let isPopOut: Swift.String
        public static let platform: Swift.String
        public static let closedCaptions: Swift.String
      }
      public enum Values {
        public enum MediaType : Swift.String, Swift.Codable {
          case video
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
        public enum Actions : Swift.String, Swift.Codable {
          case play
          case pause
          case end
          case forward
          case rewind
          case ping
          case p25
          case p50
          case p75
          case p90
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
        public enum FeatureType {
          public static let main: Swift.String
          public static let page_part: Swift.String
          public static let article_part: Swift.String
        }
      }
    }
    public enum AdData {
      public enum Key {
        public static let type: Swift.String
        public static let action: Swift.String
        public static let id: Swift.String
        public static let isInView: Swift.String
        public static let isMute: Swift.String
        public static let isLinear: Swift.String
        public static let cost: Swift.String
        public static let timingType: Swift.String
        public static let feature: Swift.String
        public static let pricingModel: Swift.String
      }
      public enum Values {
        public enum Action : Swift.String, Swift.Codable {
          case ping
          case misclick
          case impression
          case play
          case load
          case skip
          case click
          case end
          case pause
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
        public enum AdEventType : Swift.String, Swift.Codable {
          case video
          case audio
          case text
          case banner
          case interactive
          case call
          case ther
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
      }
    }
  }
  public struct Config {
    public let client: Swift.String
    public let deviceType: SophiSDK.SophiTracker.Constants.Config.Values.DeviceType
    public let environment: SophiSDK.SophiTracker.Constants.Config.Values.Environment
    public let appVersion: Swift.String
    public let userID: Swift.String?
    public init(client: Swift.String, deviceType: SophiSDK.SophiTracker.Constants.Config.Values.DeviceType, environment: SophiSDK.SophiTracker.Constants.Config.Values.Environment, appVersion: Swift.String, userID: Swift.String? = nil)
  }
  public struct EventData {
    public init(type: SophiSDK.SophiTracker.Constants.EventTypes, data: [SophiSDK.EventTrackable])
    public let type: SophiSDK.SophiTracker.Constants.EventTypes
    public let data: [SophiSDK.EventTrackable]
  }
  public struct AccountData : SophiSDK.EventTrackable {
    public let type: SophiSDK.SophiTracker.Constants.AccountData.Values.AccountType
    public let action: SophiSDK.SophiTracker.Constants.AccountData.Values.Action
    public init(type: SophiSDK.SophiTracker.Constants.AccountData.Values.AccountType, action: SophiSDK.SophiTracker.Constants.AccountData.Values.Action)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct VisitorData : SophiSDK.EventTrackable {
    public init(type: SophiSDK.SophiTracker.Constants.VisitorData.Values?, userID: Swift.String?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PageData : SophiSDK.EventTrackable {
    public init(pageType: SophiSDK.SophiTracker.Constants.PageData.PageTypes, url: Swift.String, title: Swift.String, breadcrumb: Swift.String, sectionName: Swift.String, keywords: [Swift.String]?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PingData : SophiSDK.EventTrackable {
    public init(view: UIKit.UIView? = nil, maxY: Swift.Int? = nil, length: Swift.Int? = nil)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ContentData : SophiSDK.EventTrackable {
    public init(contentType: SophiSDK.SophiTracker.Constants.PageData.ContentTypeValues, contentId: Swift.String? = nil, accessCategory: Swift.String? = nil, contentSize: Swift.Int? = nil, accessName: Swift.String? = nil, ownership: Swift.String? = nil, creditLine: Swift.String? = nil, byline: [Swift.String]? = nil)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct WallData : SophiSDK.EventTrackable {
    public init(type: SophiSDK.SophiTracker.Constants.WallData.WallTypeValues?, name: Swift.String, isDynamic: Swift.Bool, meterCount: Swift.Int, meterLimit: Swift.Int, adsVisible: Swift.Bool, countVisibleParagraphs: Swift.Int)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LinkData : SophiSDK.EventTrackable {
    public init(type: Swift.String, targetUrl: Swift.String?, contentId: Swift.String?, linkText: Swift.String, feature: Swift.String?, position: Swift.Int?, total: Swift.Int?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct AdData : SophiSDK.EventTrackable {
    public init(type: SophiSDK.SophiTracker.Constants.AdData.Values.AdEventType, action: SophiSDK.SophiTracker.Constants.AdData.Values.Action, id: Swift.String? = nil, isInView: Swift.Bool? = nil, isMute: Swift.Bool? = nil, cost: Swift.Double? = nil, isLinear: Swift.Bool? = nil, timingType: Swift.String? = nil, feature: Swift.String? = nil, pricingModel: Swift.String? = nil)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct MediaData : SophiSDK.EventTrackable {
    public var action: SophiSDK.SophiTracker.Constants.MediaData.Values.Actions?
    public var id: Swift.String?
    public var timeElapsed: Swift.Double?
    public init(type: SophiSDK.SophiTracker.Constants.MediaData.Values.MediaType?, action: SophiSDK.SophiTracker.Constants.MediaData.Values.Actions? = nil, id: Swift.String? = nil, isAutoPlay: Swift.Bool? = nil, duration: Swift.Double? = nil, timeElapsed: Swift.Double? = nil, playbackRate: Swift.Double? = nil, previousPosition: Swift.Double? = nil, featureType: Swift.String? = nil, feature: Swift.String? = nil, isFullScreen: Swift.Bool? = nil, isInView: Swift.Bool? = nil, isMute: Swift.Bool? = nil, isPopOut: Swift.Bool? = nil, platform: Swift.String? = nil, closedCaptions: Swift.String? = nil)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct SubscriptionData : SophiSDK.EventTrackable {
    public init(transactionId: Swift.String? = nil, name: Swift.String? = nil, subscriptionType: SophiSDK.SophiTracker.Constants.SubscriptionData.SubscriptionTypeValues? = nil, id: Swift.String? = nil, termPrice: Swift.Float? = nil, startDate: Swift.String? = nil, endDate: Swift.String? = nil, termPeriod: Swift.String? = nil, termLength: Swift.Int? = nil, accountType: Swift.String? = nil, funnelName: Swift.String? = nil, trialTermPeriod: Swift.String? = nil, trialTermLength: Swift.Int? = nil, trialTermPrice: Swift.Float? = nil, rateType: Swift.String? = nil, promotionCode: Swift.String? = nil)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var currentPageViewUUID: Swift.String? {
    get
  }
  public static var shared: SophiSDK.SophiTracker?
  public func setUpTracker(config: SophiSDK.SophiTracker.Config)
  @objc deinit
  public func trackEvent(eventData: SophiSDK.SophiTracker.EventData)
  @objc override dynamic public init()
}
public class Logger {
  public enum LoggerLevel {
    case debug
    case info
    case error
    public static func == (a: SophiSDK.Logger.LoggerLevel, b: SophiSDK.Logger.LoggerLevel) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(subsystem: Swift.String? = nil, category: Swift.String)
  public func info(_ message: Swift.StaticString)
  public func info(_ message: Swift.StaticString, _ args: Swift.CVarArg)
  public func info(_ message: Swift.StaticString, _ arg1: Swift.CVarArg, _ arg2: Swift.CVarArg)
  public func debug(_ message: Swift.StaticString)
  public func debug(_ message: Swift.StaticString, _ arg: Swift.CVarArg)
  public func debug(_ message: Swift.StaticString, _ arg: Swift.CVarArg, _ arg2: Swift.CVarArg)
  public func debug(_ message: Swift.StaticString, _ arg: Swift.CVarArg, _ arg2: Swift.CVarArg, _ arg3: Swift.CVarArg)
  public func error(_ message: Swift.StaticString, _ arg: Swift.CVarArg)
  @objc deinit
}
extension SophiSDK.SophiTracker.Constants.EventDataKeys : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.EventDataKeys : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.EventTypes : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.EventTypes : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.EventTypes : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.Config.Values.Environment : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.Config.Values.Environment : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.Config.Values.Environment : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.Config.Values.DeviceType : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.Config.Values.DeviceType : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.Config.Values.DeviceType : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.AccountData.Values.AccountType : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.AccountData.Values.AccountType : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.AccountData.Values.AccountType : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.AccountData.Values.Action : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.AccountData.Values.Action : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.AccountData.Values.Action : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.VisitorData.Values : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.VisitorData.Values : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.VisitorData.Values : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.SubscriptionData.SubscriptionTypeValues : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.SubscriptionData.SubscriptionTypeValues : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.SubscriptionData.SubscriptionTypeValues : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.WallData.WallTypeValues : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.WallData.WallTypeValues : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.WallData.WallTypeValues : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.PageData.PageTypes : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.PageData.PageTypes : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.PageData.PageTypes : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.PageData.ContentTypeValues : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.PageData.ContentTypeValues : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.PageData.ContentTypeValues : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.MediaData.Values.MediaType : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.MediaData.Values.MediaType : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.MediaData.Values.MediaType : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.MediaData.Values.Actions : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.MediaData.Values.Actions : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.MediaData.Values.Actions : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.AdData.Values.Action : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.AdData.Values.Action : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.AdData.Values.Action : Swift.RawRepresentable {}
extension SophiSDK.SophiTracker.Constants.AdData.Values.AdEventType : Swift.Equatable {}
extension SophiSDK.SophiTracker.Constants.AdData.Values.AdEventType : Swift.Hashable {}
extension SophiSDK.SophiTracker.Constants.AdData.Values.AdEventType : Swift.RawRepresentable {}
extension SophiSDK.Logger.LoggerLevel : Swift.Equatable {}
extension SophiSDK.Logger.LoggerLevel : Swift.Hashable {}
